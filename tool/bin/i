#!/usr/bin/env node

/* eslint-disable no-console */
const path = require('path');
const fs = require('fs');
const childProcess = require('child_process');

const pkgPath = path.resolve(__dirname, '../../scaffold/package.json');
const messages = {
  submodule_warning:
    'Warning: 请先执行 `$ git submodule init` 和 `$ git submodule update --recursive`，确保子模块正常引入.',
  submodule_pull_success: '已自动执行上述命令，子模块 scaffold 拉取成功...',
  git_not_fount: '请先安装 git，再手动执行上述命令...',
  submodule_deps_install: '开始安装子模块 scaffold 的依赖包...',
  submodule_deps_install_success: '子模块依赖包安装成功',
  submodule_deps_install_fail: '子模块依赖包安装失败，请手动重试',
  project_deps_install: '接下来安装项目的依赖包...\n',
};

function color(id) {
  // 1=red, 2=green, 3=yellow
  return `\x1b[3${id}m%s\x1b[0m`;
}

const runChildProcess = (command, ...args) =>
  new Promise((resolve, reject) => {
    console.log(`Try command: ${command} ${args.join(' ')}`);
    const task = childProcess
      .spawn(command, args, { shell: true })
      .on('error', reject)
      .on('close', code => (code ? reject() : resolve()));
    task.stdout.on('data', data => console.log(`${data}`));
    task.stderr.on('data', data => console.error(`${data}`));
  });

function runCmd() {
  const success = color(2);
  const fail = color(1);
  const installCommands = ['tnpm', 'cnpm', 'yarn', 'npm'];
  console.log(success, messages.submodule_deps_install);
  runChildProcess(installCommands[0], 'install')
    .catch(() => runChildProcess(installCommands[1], 'install'))
    .catch(() => runChildProcess(installCommands[2], 'install'))
    .catch(() => runChildProcess(installCommands[3], 'install'))
    .then(() => {
      console.log(success, messages.submodule_deps_install_success);
    })
    .catch(() => {
      console.log(fail, messages.submodule_deps_install_fail);
    });
}

if (fs.existsSync(pkgPath)) {
  runCmd();
} else {
  console.log(color(3), messages.submodule_warning);
  runChildProcess('git', 'submodule', 'init')
    .then(() => runChildProcess('git', 'submodule', 'update', '--recursive'))
    .catch(() => {
      console.log(color(1), messages.git_not_fount);
      process.kill(process.pid);
    })
    .then(() => {
      console.log(color(2), messages.submodule_pull_success);
      runCmd();
    });
}
